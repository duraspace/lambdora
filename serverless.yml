service: lambdora

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: java8
  environment: # Service wide environment variables
    DYNAMODB_TABLE: RESOURCE_TRIPLE
    NOTIFICATION_EMAIL: sysadmin@duraspace.org
  iamRoleStatements: # IAM role statements which are applied to role attached to lambda functions
      # Allows code in lambda function to read/write data in DynamoDB
      # This list of actions is a subset of those available from DynamoDB, based on the expected needs of this project
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Allows the above actions to be performed on the DynamoDb table and indexes created in the resources below
      Resource:
        - "arn:aws:dynamodb:*:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:*:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
      # Allows Lambda to write to an SNS topic as a dead letter queue
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        Ref: DeadLetterQueue

package:
  artifact: lambdora-http-api/build/distributions/lambdora-http-api-0.1.0-SNAPSHOT.zip

functions:
  ldpJersey:
    handler: org.fcrepo.lambdora.ldp.JerseyRequestHandler
    events:
      - http:
          path: /{thepath+}
          method: any
      - http:
          path: /
          method: any
    onError:
      Ref: DeadLetterQueue
    timeout: 20

resources:
  Resources:
    # Creates DynamoDB table named "RESOURCE_TRIPLE" with primary, composite key of "resource_name" and "rdf_triple"
    # This table also has two indexes (see comments below)
    resourceTripleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: resource_name
            AttributeType: S
          - AttributeName: rdf_triple
            AttributeType: S
          - AttributeName: rdf_predicate
            AttributeType: S
          - AttributeName: rdf_object
            AttributeType: S
        KeySchema:
          - AttributeName: resource_name
            KeyType: HASH
          - AttributeName: rdf_triple
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        LocalSecondaryIndexes:
          # Index providing a secondary sort on rdf_predicate to allow querying by resource_name + rdf_predicate
          - IndexName: predicateIndex
            KeySchema:
              - AttributeName: resource_name
                KeyType: HASH
              - AttributeName: rdf_predicate
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - rdf_subject
                - rdf_object
              ProjectionType: INCLUDE
        GlobalSecondaryIndexes:
          # Index providing ability to query on referenced rdf_object and/or rdf_predicate
          - IndexName: objectIndex
            KeySchema:
              - AttributeName: rdf_object
                KeyType: HASH
              - AttributeName: rdf_predicate
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - rdf_subject
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    # Creates an SNS topic which is used to capture failed lambda responses
    DeadLetterQueue:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: lambda-dead-letter
        Subscription:
          - Endpoint: ${self:provider.environment.NOTIFICATION_EMAIL}
            Protocol: email
